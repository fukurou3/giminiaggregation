rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // 画像ファイルチェック関数
    function isImage() {
      return request.resource.contentType.matches('image/(jpeg|png|webp)');
    }
    
    // ファイルサイズチェック関数（10MB未満）
    function isValidSize() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // 所有者チェック関数
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    
    // 認証済みユーザーチェック関数
    function isAuthenticated() {
      return request.auth != null;
    }

    // 投稿画像: /post-images/{uid}/{imageId}
    match /post-images/{uid}/{imageId} {
      // 読み取り：パブリック（誰でも閲覧可能）
      allow read: if true;
      
      // 書き込み：認証済み & 本人のみ & 画像ファイル & 適切なサイズ
      allow write: if isAuthenticated() 
                   && isOwner(uid) 
                   && isImage() 
                   && isValidSize();
    }
    
    // プロフィール画像: /profile-images/{uid}/{imageId}  
    match /profile-images/{uid}/{imageId} {
      // 読み取り：パブリック（誰でも閲覧可能）
      allow read: if true;
      
      // 書き込み：認証済み & 本人のみ & 画像ファイル & 適切なサイズ
      allow write: if isAuthenticated() 
                   && isOwner(uid) 
                   && isImage() 
                   && isValidSize();
    }
    
    // 一時画像アップロード: /tmp/{sessionId}/{fileName}
    match /tmp/{sessionId}/{fileName} {
      // 読み取り：認証済みユーザーのみ（処理監視用）
      allow read: if isAuthenticated();
      
      // 書き込み：認証済み & 画像ファイル & 適切なサイズ
      // sessionIdはクライアント生成なので、認証済みなら誰でも書き込み可能
      allow write: if isAuthenticated() 
                   && isImage() 
                   && isValidSize();
                   
      // 削除：Cloud Functions用（処理完了後のクリーンアップ）
      allow delete: if true; // Cloud Functionsからの削除を許可
    }
    
    // 処理済み公開画像: /public/{path=**}
    match /public/{path=**} {
      // 読み取り：パブリック（CDN配信用）
      allow read: if true;
      
      // 書き込み：Cloud Functionsのみ（サーバー側で処理済み画像を配置）
      allow write: if false; // クライアントからの直接書き込み禁止
    }
  }
}