================================================================================
                        画像処理フロー仕様書
                     giminiaggregation プロジェクト
                         更新日: 2025-01-09
================================================================================

【概要】
投稿画面における画像アップロード時の処理フローを記載します。
本システムは高性能な並列処理とセキュリティ強化を実現しています。

================================================================================
1. 画像処理の全体フロー
================================================================================

[ユーザー操作]
    ↓
[画像選択/ドロップ] → ImageUploader.tsx
    ↓
[ファイル検証]
    - 形式チェック: JPEG, PNG, WebP
    - サイズチェック: 個別10MB以下、合計4MB以下
    - 重複チェック: SHA-256ハッシュによる検出
    ↓
[5:3プレビュー生成] → Canvas APIで即座に表示
    ↓
[並列画像処理]
    ├─[WebWorker利用可能時] → useImageWorker.ts
    │   └─ 最大4つのWorkerで並列処理
    └─[WebWorker利用不可時] → メインスレッドで処理
    ↓
[Firebase Storage アップロード]
    ↓
[完了]

================================================================================
2. 主要コンポーネント構成
================================================================================

■ フロントエンド処理層
├─ src/components/ui/ImageUploader.tsx
│   - メインUIコンポーネント
│   - ドラッグ&ドロップ対応
│   - プレビュー表示
│   - 進捗表示
│
├─ src/hooks/useImageWorker.ts
│   - WebWorkerプール管理
│   - 2-4個のWorkerを動的管理
│   - 自動フォールバック機能
│
└─ src/workers/imageProcessor.worker.ts
    - バックグラウンド画像処理
    - EXIF除去
    - 圧縮・リサイズ

■ ユーティリティ層
├─ src/lib/utils/imageUtils.ts
│   - 画像処理コア機能
│   - ハッシュ生成
│   - ファイル検証
│
├─ src/lib/utils/exifRemover.ts
│   - EXIFメタデータ除去
│   - Canvas再エンコード
│   - プライバシー保護
│
└─ src/lib/utils/storageUtils.ts
    - Firebase Storage連携
    - アップロード管理
    - URL生成

================================================================================
3. 画像処理の詳細仕様
================================================================================

■ 受け入れ可能な画像形式
- JPEG (.jpg, .jpeg)
- PNG (.png)
- WebP (.webp)

■ 制限事項
- 個別ファイル: 最大10MB
- 合計容量: 最大4MB
- 枚数: 最大5枚
- アスペクト比: 5:3に自動切り抜き

■ 処理内容
1. EXIF除去（セキュリティ）
   - 位置情報などの個人情報を削除
   - Canvas API経由で再エンコード
   - 品質95%で出力

2. アスペクト比調整
   - 5:3の比率に中央切り抜き
   - 元画像の中心を維持
   - プレビューで確認可能

3. 圧縮・最適化
   - 最大サイズ: 0.5MB
   - 最大幅/高さ: 1200px
   - browser-image-compression使用
   - 品質80%スタート

================================================================================
4. WebWorker並列処理
================================================================================

■ Worker Pool構成
- 最小: 2 Workers
- 最大: 4 Workers（CPUコア数に依存）
- 自動スケーリング

■ 処理フロー
1. ファイル数に応じてバッチ分割
2. 各Workerに処理を割り当て
3. 並列で画像処理実行
4. 結果を集約して返却

■ フォールバック
- Worker作成失敗時 → メインスレッド処理
- Worker処理失敗時 → 個別にメインスレッド処理
- タイムアウト: 30秒/画像

================================================================================
5. セキュリティ対策
================================================================================

■ EXIF除去
- 撮影場所（GPS座標）
- 撮影日時
- カメラ機種・設定
- その他のメタデータ

■ 実装方法
- Canvas APIによる再描画
- OffscreenCanvas（Worker内）
- 品質を維持しながらメタデータ削除

================================================================================
6. パフォーマンス最適化
================================================================================

■ 並列処理
- WebWorkerによるマルチスレッド処理
- UIスレッドのブロッキング回避
- CPU効率的な利用

■ メモリ管理
- Blob URLの適切な解放
- createdBlobUrlsRefでトラッキング
- コンポーネントアンマウント時のクリーンアップ

■ プログレッシブアップロード
- 処理済み画像から順次アップロード
- 進捗バー表示
- エラー時の個別リトライ

================================================================================
7. エラーハンドリング
================================================================================

■ ファイル検証エラー
- 形式エラー: "有効な画像ファイル（JPEG, PNG, WebP）を選択してください"
- サイズエラー: 個別ファイル名とサイズを表示
- 容量制限エラー: 現在容量と追加予定容量を表示

■ 処理エラー
- EXIF除去失敗: 警告ログ出力、元画像で続行
- Worker処理失敗: メインスレッドでフォールバック
- アップロード失敗: エラー状態を画像ごとに表示

================================================================================
8. ユーザー体験の工夫
================================================================================

■ ビジュアルフィードバック
- 5:3プレビュー表示（切り抜き後の見た目）
- 元画像サイズ表示（幅×高さ）
- アップロード進捗バー
- 処理状態インジケーター

■ インフォメーション表示
- 🎨 5:3比率に自動切り抜き
- 🔒 EXIF除去
- 📊 総容量制限: 4MB
- ⚡ 並列処理対応（利用可能時）

■ ドラッグ&ドロップ
- 視覚的なドロップゾーン
- ドラッグ中のハイライト
- 複数ファイル同時選択

■ 画像の並び替え
- ドラッグによる順序変更
- 番号表示（1, 2, 3...）
- 即座の反映

================================================================================
9. 技術スタック
================================================================================

■ フレームワーク
- Next.js 15.4.5
- React 18
- TypeScript

■ 画像処理ライブラリ
- browser-image-compression
- Canvas API
- OffscreenCanvas (WebWorker内)

■ ストレージ
- Firebase Storage
- Firebase Authentication連携

■ 状態管理
- React Hooks (useState, useCallback, useRef, useEffect)
- カスタムフック (useImageWorker)

================================================================================
10. ファイル構成
================================================================================

src/
├── components/
│   └── ui/
│       └── ImageUploader.tsx      # メインUIコンポーネント
├── hooks/
│   └── useImageWorker.ts          # WebWorker管理フック
├── workers/
│   └── imageProcessor.worker.ts   # 画像処理Worker
└── lib/
    └── utils/
        ├── imageUtils.ts           # 画像処理ユーティリティ
        ├── exifRemover.ts          # EXIF除去ユーティリティ
        └── storageUtils.ts         # Storage連携ユーティリティ

================================================================================
                                  以上
================================================================================