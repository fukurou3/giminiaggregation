# 作品投稿画面の画像アップロード処理フロー詳細解説（改訂版）

## 概要
作品投稿画面では、二段階アップロードによるセキュアな画像処理システムを実装。フロントエンドで基本処理後、サーバーサイドで検疫・変換・最適化を行い、最終的に5:3比率のWebP形式で配信する。

## 主要コンポーネント

### 1. ImageUploader.tsx
- メインの画像アップロード UI コンポーネント
- ドラッグ&ドロップとファイル選択の両方をサポート
- 画像のプレビュー、並び替え、削除機能

### 2. 画像処理関連ユーティリティ
- imageUtils.ts: 画像の処理、検証、ハッシュ生成
- storageUtils.ts: Firebase Storageへのアップロード処理
- exifRemover.ts: セキュリティのためのEXIFデータ削除

## 詳細な処理フロー

### Phase 1: ファイル選択・事前検証
1. **ファイル選択**
   - ドラッグ&ドロップまたはファイル選択ダイアログ
   - 対応形式: JPEG, PNG, WebP
   - 最大5枚まで選択可能

2. **基本検証・レート制限**
   - ファイル形式チェック（JPEG/PNG/WebP）
   - 個別ファイルサイズ制限（10MB）
   - 総容量制限（30MB）→ UX確保のため緩和
   - 既存画像との重複チェック（SHA-256ハッシュベース）
   - **レート制限チェック**: UIDごと1日10枚、IPごと1時間100リクエスト

### Phase 2: フロントエンド前処理
1. **プレビュー生成**
   - Canvas APIを使用して5:3比率のプレビューを生成
   - 最大300px幅でプレビュー表示
   - 元画像の寸法情報も保持

2. **EXIFデータ除去（必須）**
   - ✅ **セキュリティ強化**: 失敗時は即エラー（未サニタイズのアップロード禁止）
   - 位置情報等のメタデータを完全削除
   - exifRemover.ts + WebWorkerで実装

3. **基本的な画像圧縮**
   - browser-image-compressionライブラリを使用
   - 一時的な圧縮（サーバーサイドで再処理される）

### Phase 3: 二段階アップロード
1. **第1段階: /tmpディレクトリへの非公開アップロード**
   - パス: `tmp/{sessionId}/{uuid}.{extension}`
   - セッションIDでファイル群を管理
   - 処理ステータス: 'pending'

2. **Cloud Functions自動トリガー**
   - Storage onFinalizeイベントで/tmp/配下のアップロードを検知
   - タイムアウト: 9分、メモリ: 2GB、最大同時実行: 10インスタンス

### Phase 4: サーバーサイド検疫・変換
1. **セキュリティ検査**
   - ファイルサイズ検証（30MB制限）
   - マジックバイト検証（ファイル偽装対策）
   - 総ピクセル数制限（50MP、DoS攻撃対策）

2. **正規化・変換処理**
   - EXIF Orientation情報の適用
   - 5:3アスペクト比への中央クロップ
   - sRGB色空間への正規化
   - WebP再エンコード（品質80%、最大1200px）

3. **第2段階: /publicディレクトリへの書き出し**
   - パス: `public/{contentHash}.webp`
   - 内容ハッシュによる命名（重複排除）
   - CDNキャッシュ設定: immutable, max-age=31536000

4. **メタデータ記録・クリーンアップ**
   - Firestoreに処理結果を記録
   - /tmpディレクトリの原本削除（失敗時は遅延リトライ）

### Phase 5: 状態管理・エラーハンドリング
1. **状態管理**
   - React useStateでアップロード状態を管理
   - 競合状態防止のため適切な同期処理

2. **エラーハンドリング**
   - ネットワークエラー時の自動リトライ
   - ユーザーフレンドリーなエラーメッセージ
   - 部分的失敗時の個別エラー表示

3. **メモリ管理**
   - Blob URLの適切な解放
   - Canvas要素のクリーンアップ
   - メモリリーク防止

## 技術的特徴

### セキュリティ強化
- **二段階アップロード**: 非公開→検疫→公開の流れ
- **マジックバイト検証**: ファイル偽装攻撃対策
- **EXIF完全除去**: 失敗時は即エラー（位置情報漏洩防止）
- **総ピクセル数制限**: DoS攻撃対策（50MP制限）
- **内容ハッシュ**: 重複排除と整合性検証

### パフォーマンス最適化
- **WebWorker並列処理**: UI非ブロッキング
- **Cloud Functions並列実行**: 最大10インスタンス
- **Sharp高速変換**: サーバーサイドでのWebP最適化
- **CDN最適化**: immutableキャッシュ設定

### コスト最適化
- **統一WebP形式**: 配信サイズ削減（目標≤4MB）
- **重複除去**: 内容ハッシュによる自動重複排除
- **効率的リソース管理**: /tmp自動クリーンアップ

### レート制限・コストガード
- **UIDごと**: 1日10枚制限
- **IPごと**: 1時間100リクエスト制限
- **リアルタイム監視**: 異常アップロード検知
- **Firestore使用量追跡**: ユーザー/IP別統計

### ユーザビリティ
- **容量制限緩和**: 30MB（アップロード前）
- **処理状況表示**: 検疫・変換・最適化の詳細表示
- **エラー詳細化**: 具体的な失敗理由の表示
- **並び替え**: ドラッグ&ドロップ対応

### 信頼性
- **タイムアウト管理**: 9分Cloud Functions制限
- **自動リトライ**: 指数バックオフ
- **失敗時ログ**: Firestore failedImages集合
- **遅延クリーンアップ**: /tmp削除失敗時の再試行

## フォルダ構成
```
# フロントエンド
src/
├── app/api/
│   ├── check-image-processing/route.ts    # 画像処理状況確認API
│   └── check-rate-limits/route.ts         # レート制限チェックAPI
├── components/ui/
│   └── ImageUploader.tsx                  # メインのアップローダーコンポーネント（二段階対応）
├── lib/
│   ├── constants/
│   │   └── upload.ts                      # アップロード定数
│   ├── schemas/
│   │   └── uploadSchema.ts                # バリデーションスキーマ
│   └── utils/
│       ├── imageUtils.ts                  # 画像処理・検証（EXIF必須除去対応）
│       ├── storageUtils.ts                # 二段階アップロード＋処理待機
│       ├── exifRemover.ts                 # EXIF除去機能
│       ├── uploadErrors.ts                # エラー定義
│       ├── uploadHelpers.ts               # ヘルパー関数
│       └── uploadLogger.ts                # ログ機能
├── hooks/
│   ├── useImageWorker.ts                  # WebWorker管理
│   └── useSubmitForm.ts                   # フォーム状態管理
├── workers/
│   └── imageProcessor.worker.ts           # WebWorker（EXIF必須除去対応）
└── types/
    └── Upload.ts                          # 型定義

# サーバーサイド（Cloud Functions）
functions/
├── package.json                           # 依存関係（firebase-functions, sharp等）
└── src/
    ├── index.ts                           # 関数エクスポート
    ├── imageProcessor.ts                  # 画像検疫・変換メイン処理
    ├── rateLimiter.ts                     # レート制限・コストガード
    └── toggleFavorite.ts                  # 既存機能

# ストレージ構造
Firebase Storage/
├── tmp/{sessionId}/{uuid}.{ext}           # 非公開（処理前）
└── public/{contentHash}.webp              # 公開（処理後）

# Firestore Collections
├── processedImages/                       # 処理済み画像メタデータ
│   └── {contentHash}                      # ドキュメントID
├── failedImages/                          # 処理失敗ログ
│   └── {randomId}                         # ドキュメントID
├── userLimits/                            # ユーザー別日次制限
│   └── {uid}_{YYYY-MM-DD}                 # ドキュメントID
└── ipLimits/                              # IP別時間制限
    └── {ip}_{YYYY-MM-DDTHH}               # ドキュメントID
```

## 投稿フロー統合
画像アップロード処理は作品投稿フォーム（submit/page.tsx）に統合され、他の投稿データ（タイトル、説明、タグ等）と共にAPI経由でサーバーに送信される。

## 改善完了事項（2024年12月版）

### ✅ セキュリティ強化
- **EXIF除去必須化**: 失敗時は即エラー（未サニタイズのアップロード禁止）
- **二段階アップロード**: `/tmp`（非公開）→ 検疫 → `/public`（公開）
- **マジックバイト検証**: ファイル偽装攻撃対策
- **DoS攻撃対策**: 総ピクセル数制限（50MP）

### ✅ コスト最適化
- **統一WebP変換**: 配信サイズ削減（目標≤4MB）
- **内容ハッシュ重複除去**: ストレージ効率化
- **CDN最適化**: immutableキャッシュ設定

### ✅ レート制限実装
- **UIDごと**: 1日10枚制限
- **IPごと**: 1時間100リクエスト制限
- **Firestore追跡**: 使用量統計・監視

### ✅ UX改善
- **容量制限緩和**: 8MB → 30MB（アップロード前）
- **処理状況表示**: 「検疫・変換・最適化」詳細表示
- **エラー詳細化**: 具体的な失敗理由

### ✅ インフラ強化
- **Cloud Functions**: Storage onFinalizeトリガー
- **Sharp変換**: サーバーサイド高速処理
- **自動クリーンアップ**: /tmp削除＋失敗時リトライ

この改善により、セキュリティと配信コストを両立した堅牢な画像処理システムが完成しました。