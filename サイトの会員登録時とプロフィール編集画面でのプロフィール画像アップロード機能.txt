# プロフィール画像アップロード処理フロー詳細解説

## 概要
サイトの会員登録時とプロフィール編集画面でのプロフィール画像アップロード機能は、投稿画像とは異なるシンプルなシステムを採用。フロントエンドで基本処理後、Google Cloud Storageに直接アップロードし、署名付きURLで配信する。

## 利用シーン

### 1. 会員登録時（ProfileSetup.tsx）
- 初回ログイン後のプロフィール設定画面
- 公開ID、ユーザー名、プロフィール画像を設定

### 2. プロフィール編集時（settings/profile/page.tsx）
- 既存プロフィールの編集画面
- プロフィール画像とカバー画像の変更

## 詳細な処理フロー

### Phase 1: 画像選択・前処理（フロントエンド）

#### 会員登録時
1. **ファイル選択**
   - ファイル入力（accept="image/*"）
   - ファイル形式チェック（image/で始まるMIMEタイプ）

2. **画像圧縮**
   - browser-image-compressionライブラリ使用
   - 最大1MB、最大800px、WebP形式変換
   - 圧縮後サイズチェック（2MB制限）

3. **プレビュー表示**
   - FileReader APIでBlob URL生成
   - 96x96px円形プレビュー表示

#### プロフィール編集時
1. **画像選択**
   - プロフィール画像: 5MB制限
   - カバー画像: 10MB制限
   - URL.createObjectURL()でプレビュー

### Phase 2: アップロード処理

#### 会員登録時
1. **setupUserProfile()呼び出し**
   - userProfile.ts内の関数
   - バリデーション（公開ID重複チェック等）

2. **uploadProfileImage()実行**
   - /api/upload-profile-image にPOST
   - Firebase認証トークン付き
   - FormDataでファイル送信

#### プロフィール編集時
1. **直接Firebase Storage**
   - Firebase Storage SDKを使用
   - `users/{uid}/profile.jpg` パスに保存
   - `users/{uid}/cover.jpg` パスに保存

### Phase 3: サーバーサイド処理

#### API処理（/api/upload-profile-image/route.ts）
1. **認証・レート制限**
   - Firebase Admin認証
   - IP別レート制限チェック

2. **バリデーション**
   - profileImageUploadSchemaでファイル検証
   - ファイルサイズ・形式チェック

3. **Google Cloud Storage保存**
   - ファイル名: `profile-{uid}-{timestamp}.{ext}`
   - メタデータ付与（アップロード者、元ファイル名等）

4. **署名付きURL生成**
   - 7日間有効の署名付きURL
   - レスポンスで返却

### Phase 4: データ永続化

#### Firestoreへの保存
1. **userProfiles コレクション**
   - ドキュメントID: uid
   - photoURL: 署名付きURL
   - photoFileName: ストレージファイル名

2. **URL更新機能**
   - refreshProfileImageUrl()で署名付きURL再生成
   - 期限切れ対策

## 技術的特徴

### シンプル設計
- **直接アップロード**: 投稿画像のような二段階処理なし
- **基本圧縮のみ**: サーバーサイド変換なし
- **署名付きURL**: セキュアな画像配信

### セキュリティ対策
- **Firebase認証**: トークンベース認証
- **レート制限**: IP別アクセス制御
- **ファイル検証**: サイズ・形式制限
- **プライベートバケット**: 署名付きURLのみアクセス可

### ユーザビリティ
- **リアルタイムプレビュー**: 選択即時表示
- **自動圧縮**: WebP変換で容量削減
- **進捗表示**: 圧縮・アップロード状況

### 容量制限
- **会員登録時**: 圧縮後2MB
- **プロフィール編集**: 5MB（プロフィール）、10MB（カバー）
- **自動圧縮**: 1MB、800px以下に調整

## ファイル構成

```
# フロントエンド
src/
├── app/
│   ├── api/
│   │   ├── upload-profile-image/route.ts     # プロフィール画像アップロードAPI
│   │   └── refresh-profile-image-url/route.ts # 署名付きURL更新API
│   └── settings/profile/page.tsx             # プロフィール編集画面
├── components/
│   ├── ProfileSetup.tsx                      # 会員登録時プロフィール設定
│   └── profile/settings/
│       ├── ImageUploadSection.tsx            # 画像アップロードUI
│       ├── ProfileFormSection.tsx            # プロフィールフォーム
│       └── SettingsHeaderSection.tsx         # 設定画面ヘッダー
├── lib/
│   ├── schemas/uploadSchema.ts               # プロフィール画像バリデーション
│   └── userProfile.ts                        # プロフィール管理機能
├── hooks/
│   └── useUserProfile.ts                     # プロフィール状態管理
└── types/
    ├── User.ts                               # ユーザー型定義
    └── UserProfile.ts                        # プロフィール型定義

# ストレージ構造（Google Cloud Storage）
├── profile-{uid}-{timestamp}.{ext}           # API経由アップロード
└── users/{uid}/
    ├── profile.jpg                           # 直接アップロード（プロフィール）
    └── cover.jpg                             # 直接アップロード（カバー）

# Firestore Collections
└── userProfiles/                             # プロフィール情報
    └── {uid}/                                # ドキュメントID
        ├── photoURL: string                  # 署名付きURL
        ├── photoFileName: string             # ストレージファイル名
        ├── coverImage: string                # カバー画像URL
        └── ...（その他プロフィール情報）
```

## 投稿画像との違い

| 項目 | プロフィール画像 | 投稿画像 |
|------|------------------|-----------|
| **処理方式** | 直接アップロード | 二段階（/tmp → /public） |
| **変換** | フロントエンド圧縮のみ | サーバーサイドWebP変換 |
| **検疫** | 基本バリデーションのみ | 厳密セキュリティ検査 |
| **アスペクト比** | 維持 | 5:3強制切り抜き |
| **配信** | 署名付きURL（7日） | CDN（永続キャッシュ） |
| **ストレージ** | プライベート | パブリック |
| **レート制限** | IP別のみ | UID別＋IP別 |

## 改善の余地

### セキュリティ強化案
- **マジックバイト検証**: ファイル偽装対策
- **EXIF除去**: メタデータ削除
- **ユーザー別制限**: 日次アップロード制限

### パフォーマンス改善案
- **WebWorker処理**: UI非ブロッキング
- **プログレッシブ表示**: 段階的画質向上
- **CDN配信**: パフォーマンス向上

### UX改善案
- **画像編集機能**: 切り抜き・回転
- **複数形式対応**: HEIC等モダン形式
- **バッチアップロード**: 複数画像同時処理

## 現在の実装状況

✅ **基本機能完備**
- 会員登録時・編集時の画像アップロード
- 署名付きURL配信システム
- 基本的なセキュリティ対策

⚠️ **改善検討項目**
- 投稿画像システムとの統合
- より厳密なセキュリティ検査
- 高度な画像処理機能

プロフィール画像システムは、シンプルで実用的な設計により、基本的な要件を満たしている。投稿画像ほどの厳密性は不要だが、将来的にはセキュリティとパフォーマンスの向上が期待される。